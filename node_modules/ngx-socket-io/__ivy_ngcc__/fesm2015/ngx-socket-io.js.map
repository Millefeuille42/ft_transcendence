{"version":3,"file":"ngx-socket-io.js","sources":["../../src/socket-io.service.ts","../../src/socket-io.module.ts","../../ngx-socket-io.ts"],"names":["io.default"],"mappings":"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","sourcesContent":["import { Observable } from 'rxjs';\nimport { share } from 'rxjs/operators';\n\nimport * as io from 'socket.io-client';\n\nimport { SocketIoConfig } from './config/socket-io.config';\n\nexport class WrappedSocket {\n  subscribersCounter: Record<string, number> = {};\n  eventObservables$: Record<string, Observable<any>> = {};\n  ioSocket: any;\n  emptyConfig: SocketIoConfig = {\n    url: '',\n    options: {},\n  };\n\n  constructor(private config: SocketIoConfig) {\n    if (config === undefined) {\n      config = this.emptyConfig;\n    }\n    const url: string = config.url;\n    const options: any = config.options;\n    const ioFunc = (io as any).default ? (io as any).default : io;\n    this.ioSocket = ioFunc(url, options);\n  }\n\n  of(namespace: string) {\n    this.ioSocket.of(namespace);\n  }\n\n  on(eventName: string, callback: Function) {\n    this.ioSocket.on(eventName, callback);\n  }\n\n  once(eventName: string, callback: Function) {\n    this.ioSocket.once(eventName, callback);\n  }\n\n  connect() {\n    return this.ioSocket.connect();\n  }\n\n  disconnect(_close?: any) {\n    return this.ioSocket.disconnect.apply(this.ioSocket, arguments);\n  }\n\n  emit(_eventName: string, ..._args: any[]) {\n    return this.ioSocket.emit.apply(this.ioSocket, arguments);\n  }\n\n  removeListener(_eventName: string, _callback?: Function) {\n    return this.ioSocket.removeListener.apply(this.ioSocket, arguments);\n  }\n\n  removeAllListeners(_eventName?: string) {\n    return this.ioSocket.removeAllListeners.apply(this.ioSocket, arguments);\n  }\n\n  fromEvent<T>(eventName: string): Observable<T> {\n    if (!this.subscribersCounter[eventName]) {\n      this.subscribersCounter[eventName] = 0;\n    }\n    this.subscribersCounter[eventName]++;\n\n    if (!this.eventObservables$[eventName]) {\n      this.eventObservables$[eventName] = new Observable((observer: any) => {\n        const listener = (data: T) => {\n          observer.next(data);\n        };\n        this.ioSocket.on(eventName, listener);\n        return () => {\n          this.subscribersCounter[eventName]--;\n          if (this.subscribersCounter[eventName] === 0) {\n            this.ioSocket.removeListener(eventName, listener);\n            delete this.eventObservables$[eventName];\n          }\n        };\n      }).pipe(share());\n    }\n    return this.eventObservables$[eventName];\n  }\n\n  fromOneTimeEvent<T>(eventName: string): Promise<T> {\n    return new Promise<T>(resolve => this.once(eventName, resolve));\n  }\n}\n","import { NgModule, ModuleWithProviders, InjectionToken } from '@angular/core';\nimport { SocketIoConfig } from './config/socket-io.config';\nimport { WrappedSocket } from './socket-io.service';\n\n/** Socket factory */\nexport function SocketFactory(config: SocketIoConfig) {\n  return new WrappedSocket(config);\n}\n\nexport const SOCKET_CONFIG_TOKEN = new InjectionToken<SocketIoConfig>(\n  '__SOCKET_IO_CONFIG__'\n);\n\n@NgModule({})\nexport class SocketIoModule {\n  static forRoot(config: SocketIoConfig): ModuleWithProviders<SocketIoModule> {\n    return {\n      ngModule: SocketIoModule,\n      providers: [\n        { provide: SOCKET_CONFIG_TOKEN, useValue: config },\n        {\n          provide: WrappedSocket,\n          useFactory: SocketFactory,\n          deps: [SOCKET_CONFIG_TOKEN],\n        },\n      ],\n    };\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {SOCKET_CONFIG_TOKEN as ɵb,SocketFactory as ɵa} from './src/socket-io.module';"]}